source $vcd/keybinds_apps.vim

let g:Netrw_UserMaps= [
\                       ["e", "Key_3up" ],
\                       ["s", "Key_move_to_beginning_of_word" ],
\                       ["d", "Key_3down"],
\                       ["f", "Key_move_to_end_of_word" ],
\                       ["D", "Netrw_Create_Dir" ],
\]

let g:keybinds={}

let additonal_keybinds = {
\ '<C-o>___!___Common'                       :                   [    '*'    ,   '<C-V>uf42e'   ],
\}
call extend( g:keybinds, additonal_keybinds )

" Scrolling
let additonal_keybinds = {
\ '<S-a>___n___Common'                      :                   [    '*'    ,    'a'   ],
\ 'a___n___Common'                           :                   [    '*'    ,    'i'   ],
\ 'i___n___Common'                           :                   [    '*'    ,    '<C-y>'   ],
\ 'k___nv___Common'                          :                   [    '*'    ,    '<C-e>'   ],
\ 'j___nv___Common'                          :                   [    '*'    ,    'h'   ],
\ 'l___nv___Common'                          :                   [    '*'    ,    'l'   ],
\ '<S-a>___nv___ExMode'                      :                   [    '*'    ,    'a'   ],
\ 'a___n___ExMode'                           :                   [    '*'    ,    'i'   ],
\ 'i___n___ExMode'                           :                   [    '*'    ,    '<C-y>'   ],
\ 'k___nv___ExMode'                          :                   [    '*'    ,    '<C-e>'   ],
\ 'j___nv___ExMode'                          :                   [    '*'    ,    'h'   ],
\ 'l___nv___ExMode'                          :                   [    '*'    ,    'l'   ],
\ '<S-a>___n___TermMode'                    :                   [    '*@'    ,    'a'   ],
\ 'i___n___TermMode'                         :                   [    '*@'    ,    '<C-e>'   ],
\ 'k___ ___TermMode'                         :                   [    '*@'    ,    '<C-y>'   ],
\ 'j___ ___TermMode'                         :                   [    '*@'    ,    'h'   ],
\ 'l___ ___TermMode'                         :                   [    '*@'    ,    'l'   ],
\}
call extend( g:keybinds, additonal_keybinds )

"move windows around
let additonal_keybinds = {
\ '<M-e>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveUp()<CR>'   ],
\ '<M-d>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveDown()<CR>'   ],
\ '<M-s>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveLeft()<CR>'   ],
\ '<M-f>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveRight()<CR>'   ],
\ '<M-g>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveNewTab()<CR>'   ],
\ '<M-e>___!___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveUp()<CR>a'   ],
\ '<M-d>___!___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveDown()<CR>a'   ],
\ '<M-s>___!___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveLeft()<CR>a'   ],
\ '<M-f>___!___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveRight()<CR>a'   ],
\ '<M-g>___!___Common'                      :                   [    '*'    ,    '<Cmd>call DefaultMode_WinMoveNewTab()<CR>a'   ],
\ '<M-e>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call DefaultMode_WinMoveUp()<CR>a'   ],
\ '<M-d>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call DefaultMode_WinMoveDown()<CR>a'   ],
\ '<M-s>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call DefaultMode_WinMoveLeft()<CR>a'   ],
\ '<M-f>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call DefaultMode_WinMoveRight()<CR>a'   ],
\ '<M-g>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call DefaultMode_WinMoveNewTab()<CR>a'   ],
\ '<M-e>___ ___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveUp()<CR>'                            ],
\ '<M-d>___ ___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveDown()<CR>'                          ],
\ '<M-s>___ ___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveLeft()<CR>'                          ],
\ '<M-f>___ ___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveRight()<CR>'                         ],
\ '<M-g>___ ___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveNewTab()<CR>'                        ],
\ '<M-e>___!___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveUp()<CR>a'                           ],
\ '<M-d>___!___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveDown()<CR>a'                         ],
\ '<M-s>___!___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveLeft()<CR>a'                         ],
\ '<M-f>___!___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveRight()<CR>a'                        ],
\ '<M-g>___!___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveNewTab()<CR>a'                       ],
\ '<M-e>___t___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveUp()<CR>a'                           ],
\ '<M-d>___t___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveDown()<CR>a'                         ],
\ '<M-s>___t___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveLeft()<CR>a'                         ],
\ '<M-f>___t___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveRight()<CR>a'                        ],
\ '<M-g>___t___DefaultMode'              :                       [ '*'     ,      '<Cmd>call DefaultMode_WinMoveNewTab()<CR>a'                       ],
\}
call extend( g:keybinds, additonal_keybinds )


"  mutt terminal buffer keybinds
let additonal_keybinds = {
\ '<S-a>___n___Mutt'                    :                   [    '*@'    ,    'a'   ],
\ 'a___n___Mutt'                        :                   [    '*@'    ,    '<Cmd>call Enter_Mutt_Term()<CR>'   ],
\ 'i___n___Mutt'                        :                   [    '*@'    ,    '<C-e>'   ],
\ 'k___ ___Mutt'                        :                   [    '*@'    ,    '<C-y>'   ],
\ 'j___ ___Mutt'                        :                   [    '*@'    ,    'h'   ],
\ 'l___ ___Mutt'                        :                   [    '*@'    ,    'l'   ],
\ 'p___n___Mutt'                        :                   [ '*@'    ,      'p'                                                                ],
\ '<PageUp>___n___Mutt'                 :                   [ '*@'    ,      'a<C-u><C-\><C-n>'   ],
\ '<Space>___n___Mutt'                  :                   [ '*@'    ,      'a'   ],
\ '<C-e>___n___Mutt'                    :                   [ '*@'    ,      '<Cmd>call TermKeyNCE()<CR>'   ],
\ 'd___n___Mutt'                        :                   [ '*@'    ,      '3j'   ],
\ 'e___n___Mutt'                        :                   [ '*@'    ,      '3k'   ],
\ 'f___n___Mutt'                        :                   [ '*@'    ,      'e'   ],
\ 's___n___Mutt'                        :                   [ '*@'    ,      'b'   ],
\ '<C-Q>___ ___Mutt'                    :                   [ '*@'    ,      '<Cmd>call EventWinLeave()<CR><Cmd>bunload!<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Q>___!___Mutt'                    :                   [ '*@'    ,      '<Cmd>call EventWinLeave()<CR><Cmd>bunload!<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Q>___t___Mutt'                    :                   [ '*@'    ,      '<Cmd>call EventWinLeave()<CR><Cmd>bunload!<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<PageDown>___n___Mutt'               :                   [ '*@'    ,      'a<C-d><C-\><C-n>'   ],
\ '<CR>___n___Mutt'                     :                   [ '*@'    ,      '<CR>'   ],
\ '<Esc>___t___Mutt'                    :                   [    '*'    ,    '<C-\><C-N><Cmd>call EventTermEscape()<CR>'   ],
\}
call extend( g:keybinds, additonal_keybinds )

" ex mode stuff that exits or enters the mode
let additonal_keybinds = {
\ ':___v___Common'                          :                   [    '*'     ,    '<Cmd>call EventWinLeave()           <CR><Esc>q:<Cmd>        call EventExModeWinEnter() <CR>'   ],
\ ':___n___DefaultMode'                     :                   [    '*'     ,    '<Cmd>call EventWinLeave()           <CR>q:<Cmd>        call EventExModeWinEnter() <CR>'                          ],
\ ':___v___DefaultMode'                     :                   [    '*'     ,    '<Cmd>call EventWinLeave()           <CR>q:<Cmd>        call EventExModeWinEnter() <CR>'                     ],
\ ':___n___Common'                          :                   [    '*'     ,    '<Cmd>call EventWinLeave()           <CR><Esc>q:<Cmd>        call EventExModeWinEnter() <CR>'               ],
\ '<C-f>___i___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoTabRight()     <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-f>___ ___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoTabRight()     <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-s>___i___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoTabLeft()      <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Right>___i___ExMode'                  :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoRight()        <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-f>___c___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoTabRight()     <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Left>___c___ExMode'                   :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoLeft()         <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-d>___c___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoDown()         <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Left>___i___ExMode'                   :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoLeft()         <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-d>___i___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoDown()         <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Down>___i___ExMode'                   :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoDown()         <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-s>___c___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoTabLeft()      <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Down>___c___ExMode'                   :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoDown()         <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Right>___c___ExMode'                  :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoRight()        <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-d>___ ___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoDown()         <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-s>___ ___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call GoTabLeft()      <CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<CR>___n___ExMode'                       :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR>i<CR><Cmd>             call EventWinEnter()       <CR>'   ],
\ '<CR>___i___ExMode'                       :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><CR><Cmd>              call EventWinEnter()       <CR>'   ],
\ '<C-e>___i___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><C-c><Cmd>   call EventWinEnter()       <CR>'   ],
\ '<Esc>___ ___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-Down>___ ___ExMode'                   :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-e>___ ___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-Up>___i___ExMode'                     :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-q>___ ___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-Right>___ ___ExMode'                  :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-e>___c___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-Left>___ ___ExMode'                   :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-q>___i___ExMode'                      :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-Up>___ ___ExMode'                     :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\ '<C-Up>___c___ExMode'                     :                   [    '*@'    ,    '<Cmd>call EventExModeWinLeave()<CR><C-c><C-c><Cmd>        call EventWinEnter()       <CR>'   ],
\}
call extend( g:keybinds, additonal_keybinds )


" ex mode stuff that stays inside the mode
let additonal_keybinds = {
\ ':___n___ExMode'                          :                   [    '*@'    ,    ':'   ],
\ ':___v___ExMode'                          :                   [    '*@'    ,    ':'   ],
\ '<F15>___!___ExMode'                      :                   [    '*@'    ,    '<Cmd>call Win_ExMode_HeightDown()<CR>'   ],
\ '<F22>___!___ExMode'                      :                   [    '*@'    ,    '<Cmd>call Win_ExMode_HeightUp()<CR>'   ],
\ '<F22>___ ___ExMode'                      :                   [    '*@'    ,    '<Cmd>call Win_ExMode_HeightUp()<CR> '   ],
\ '<F15>___ ___ExMode'                      :                   [    '*@'    ,    '<Cmd>call Win_ExMode_HeightDown()<CR>'   ],
\}
call extend( g:keybinds, additonal_keybinds )

" window switching
let additonal_keybinds = {
\ '<C-Left>___ ___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Down>___ ___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-d>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Up>___ ___DefaultMode'                :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-e>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-Right>___ ___DefaultMode'             :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'                                          ],
\ '<C-Left>___c___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Up>___c___DefaultMode'                :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-e>___c___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-Right>___c___DefaultMode'             :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'                                          ],
\ '<C-Left>___t___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Down>___t___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-d>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Up>___t___DefaultMode'                :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-e>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-Right>___t___DefaultMode'             :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'                                          ],
\ '<C-Left>___i___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Down>___i___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-d>___i___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Up>___i___DefaultMode'                :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-e>___i___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-Right>___i___DefaultMode'             :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'                                          ],
\ '<C-Left>___v___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Down>___v___DefaultMode'              :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-d>___v___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'                                           ],
\ '<C-Up>___v___DefaultMode'                :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-e>___v___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'                                             ],
\ '<C-Right>___v___DefaultMode'             :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'                                          ],
\ '<C-f>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'                                       ],
\ '<C-f>___c___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'                                       ],
\ '<C-f>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'                                       ],
\ '<C-f>___i___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'                                       ],
\ '<C-f>___v___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'                                       ],
\ '<C-s>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'                                        ],
\ '<C-s>___c___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'                                        ],
\ '<C-s>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'                                        ],
\ '<C-s>___i___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'                                        ],
\ '<C-s>___v___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'                                        ],
\}
call extend( g:keybinds, additonal_keybinds )

" netrw
let additonal_keybinds = {
\ '-___nv___Common'                         :                   [    '*'    ,    '<Cmd>call CreateNetrwBuffer()<CR>'   ],
\ '<C-Q>___ ___NetrwMode'                  :                   [    '*'    ,    '<Cmd>call EventNetrwWinLeave()<CR><Cmd>q<CR><Cmd>call EventWinEnter()<CR>'   ],
\}

call extend( g:keybinds, additonal_keybinds )
let additonal_keybinds = {
\ '<A-a>___n___Common'                      :                   [    '*'    ,    '<Cmd>call Toggle_auto_change_dir()<CR>'     ],
\ '<S-y>___n___Common'                      :                   [    '*'    ,    '<Cmd>YRShow<CR>'     ],
\ '<F2>___n___Common'                       :                   [    '*'    ,    'q'                                          ],
\ 'q___ ___Common'                          :                   [    '*'    ,    '<Nop>'   ],
\ 'F3___n___Common'                         :                   [    '*'    ,    'n'                                          ],
\ 'F6___n___Common'                         :                   [    '*'    ,    'm'                                          ],
\ 'F1___n___Common'                         :                   [    '*'    ,    'N'                                          ],
\ 'F4___n___Common'                         :                   [    '*'    ,    ':cnext<CR>'   ],
\ 'e___ ___Common'                          :                   [    '*'    ,    '3k'   ],
\ 'e___n___Common'                          :                   [    '*'    ,    '3k'   ],
\ 'B___ ___Common'                          :                   [    '*'    ,    'S'   ],
\ '<C-Q>___!___Common'                      :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>q<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-B>___i___Common'                      :                   [    '*'    ,    '<Esc>z='   ],
\ '<C-B>___v___Common'                      :                   [    '*'    ,    '<Esc>z='   ],
\ '<C-Right>___c___Common'                  :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<M-m>___ov___Common'                     :                   [    ' '    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call Mutt()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-F>___c___Common'                      :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<LeftMouse>___o___Common'                :                   [    '*'    ,    '<Esc><LeftMouse>'   ],
\ '<F22>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call WinHeightUp()<CR>a'   ],
\ '<M-b>___c___Common'                      :                   [    ' '    ,    '<Cmd>call OpenBrowser()<CR>'   ],
\ '<M-b>___ov___Common'                     :                   [    ' '    ,    '<Cmd>call OpenBrowser()<CR>'   ],
\ '<C-Up>___c___Common'                     :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Left>___c___Common'                   :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<Tab>___i___Common'                      :                   [    '*'    ,    '<C-R>=Smart_TabComplete()<CR>'   ],
\ '<C-Right>___t___Common'                  :                   [    '*'    ,    '<Cmd>call EventTermEscape()<CR><C-\><C-N><Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Down>___i___Common'                   :                   [    '*'    ,    '<Cmd>call EventTermEscape()<CR><Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-S>___c___Common'                      :                   [    '*'    ,    '<Cmd>call EventTermEscape()<CR><Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F19>___!___Common'                      :                   [    '*'    ,    'z='   ],
\ '<C-Down>___no___Common'                  :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Q>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call EventWinLeave()<CR><Cmd>q<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<Del>___ ___Common'                      :                   [    '*'    ,    'd'   ],
\ '<C-h>___i___Common'                      :                   [    '*'    ,    '<C-S-c>'   ],
\ '<C-h>___n___Common'                      :                   [    '*'    ,    'i<C-S-c><Esc>'   ],
\ '<C-Left>___t___Common'                   :                   [    '*'    ,    '<C-\><C-N><Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-C>___i___Common'                      :                   [    '*'    ,    '<C-V>uf42e'   ],
\ '<C-B>___n___Common'                      :                   [    '*'    ,    'z='   ],
\ '<F22>___!___Common'                      :                   [    '*'    ,    '<Cmd>call WinHeightUp()<CR>'   ],
\ '<F18>___ ___Common'                      :                   [    '*'    ,    '<Cmd>cs find 1 expand("<cword>")<CR>'   ],
\ '<F9>___n___Common'                       :                   [    '*'    ,    ':call NextColor(1)<CR>'   ],
\ '<C-T>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call Create_Terminal_buffer()<CR>'   ],
\ '<M-c>___c___Common'                      :                   [    ' '    ,    '<Cmd>Calendar<CR>'   ],
\ '<M-t>___n___Common'                      :                   [    ' '    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call Todo()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<M-t>___!___Common'                      :                   [    ' '    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call Todo()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<M-t>___t___Common'                      :                   [    ' '    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call Todo()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ 'w___ ___Common'                          :                   [    '*'    ,    ','   ],
\ 'r___v___Common'                          :                   [    '*'    ,    ':normal .<CR>'   ],
\ '<3-LeftMouse>___ ___Common'              :                   [    '*'    ,    '<3-LeftMouse> y'   ],
\ '<C-Q>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>q<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F8>___n___Common'                       :                   [    '*'    ,    ':call NextColor(0)<CR>'   ],
\ '<C-Down>___v___Common'                   :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<Up>___no___Common'                      :                   [    '*'    ,    'k'   ],
\ '<M-m>___t___Common'                      :                   [    ' '    ,    '<C-\><C-N><Cmd>call EventWinLeave()<CR><Cmd>call Mutt()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-S>___no___Common'                     :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F21>___n___Common'                      :                   [    '*'    ,    '<Esc>:w<CR>'   ],
\ '<M-m>___n___Common'                      :                   [    ' '    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call Mutt()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F16>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call WinWidthR()<CR>'   ],
\ '<C-Left>___no___Common'                  :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F14>___!___Common'                      :                   [    '*'    ,    '<Cmd>call WinWidthL()<CR>a'   ],
\ '<F15>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call WinHeightDown()<CR>'   ],
\ '<M-m>___c___Common'                      :                   [    ' '    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call Mutt()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<Down>___no___Common'                    :                   [    '*'    ,    'j'   ],
\ '<F19>___ ___Common'                      :                   [    '*'    ,    'z='   ],
\ 'E___ ___Common'                          :                   [    '*'    ,    'F'   ],
\ '<F1>___ ___Common'                       :                   [    '*'    ,    'N'   ],
\ '<F15>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call WinHeightDown()<CR>a'   ],
\ '<C-Right>___no___Common'                 :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ 's___ ___Common'                          :                   [    '*'    ,    'b'   ],
\ 's___n___Common'                          :                   [    '*'    ,    'b'   ],
\ '<C-S>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F22>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call WinHeightUp()<CR><Space>'   ],
\ '<C-F>___no___Common'                     :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F21>___i___Common'                      :                   [    '*'    ,    '<Esc>:w<CR>l'   ],
\ '<M-m>___i___Common'                      :                   [    ' '    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call Mutt()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<A-:>___n___Common'                      :                   [    '*'    ,    ':'   ],
\ 'f___ ___Common'                          :                   [    '*'    ,    'e'   ],
\ 'f___n___Common'                          :                   [    '*'    ,    'e'   ],
\ '<S-l>___ ___Common'                      :                   [    '*'    ,    'f'   ],
\ '<NL>___i___Common'                       :                   [    ' '    ,    '<Plug>IMAP_JumpForward'   ],
\ '<C-S>___v___Common'                      :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<M-c>___ov___Common'                     :                   [    ' '    ,    '<Cmd>Calendar<CR>'   ],
\ '<C-V>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N>pi'   ],
\ '<F15>___!___Common'                      :                   [    '*'    ,    '<Cmd>call WinHeightDown()<CR>'   ],
\ '<Space>___n___Common'                    :                   [    '*'    ,    '<C-]>'   ],
\ '<F16>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call WinWidthR()<CR>a'   ],
\ '<M-b>___n___Common'                      :                   [    ' '    ,    '<Cmd>call OpenBrowser()<CR>'   ],
\ 'd___ ___Common'                          :                   [    '*'    ,    '3j'   ],
\ 'd___n___Common'                          :                   [    '*'    ,    '3j'   ],
\ '<F7>___n___Common'                       :                   [    '*'    ,    ':call NextColor(-1)<CR>'   ],
\ '<F14>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call WinWidthL()<CR>a'   ],
\ '<F14>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call WinWidthL()<CR>'   ],
\ 'o___n___Common'                          :                   [    '*'    ,    'o<Esc>'   ],
\ '<Down>___v___Common'                     :                   [    '*'    ,    'j'   ],
\ '<Down>___ ___Common'                     :                   [    '*'    ,    'j'   ],
\ '<Down>___n___Common'                     :                   [    '*'    ,    'j'   ],
\ 'p___n___Common'                          :                   [    '*'    ,    'p'   ],
\ '<C-Down>___t___Common'                   :                   [    '*'    ,    '<C-\><C-N><Cmd>call EventWinLeave()<CR><Cmd>call GoDown()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ 'z___ ___Common'                          :                   [    '*'    ,    '<C-R>'   ],
\ '<PageUp>___ ___Common'                   :                   [    '*'    ,    '<C-u>'   ],
\ 'b___ ___Common'                          :                   [    '*'    ,    's'   ],
\ '<2-LeftMouse>___n___Common'              :                   [    '*'    ,    '<LeftMouse>viwy'   ],
\ '<LeftRelease>___v___Common'              :                   [    '*'    ,    '<LeftRelease> y'   ],
\ '<C-Right>___i___Common'                  :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Right>___v___Common'                  :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F16>___!___Common'                      :                   [    '*'    ,    '<Cmd>call WinWidthR()<CR>a'   ],
\ '<C-F>___i___Common'                      :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-F>___v___Common'                      :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<M-b>___i___Common'                      :                   [    ' '    ,    '<Cmd>call OpenBrowser()<CR>'   ],
\ '<CR>___o___Common'                       :                   [    '*'    ,    '<Esc>'   ],
\ '<M-c>___n___Common'                      :                   [    ' '    ,    '<Cmd>Calendar<CR><Space>'   ],
\ '<C-Up>___i___Common'                     :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Up>___v___Common'                     :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Left>___i___Common'                   :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Left>___v___Common'                   :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-T>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call Create_Terminal_buffer()<CR>'   ],
\ '<C-F>___t___Common'                      :                   [    '*'    ,    '<C-\><C-N><Cmd>call EventWinLeave()<CR><Cmd>call GoTabRight()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-S>___i___Common'                      :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoTabLeft()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<PageDown>___ ___Common'                 :                   [    '*'    ,    '<C-d>'   ],
\ '<C-N>___ ___Common'                      :                   [    '*'    ,    '<Cmd>call SetCustomTabName()<CR>'   ],
\ 'S___ ___Common'                          :                   [    '*'    ,    'B'   ],
\ '<Esc><Esc>___t___Common'                 :                   [    '*'    ,    '<Esc>'   ],
\ '<2-LeftMouse>___i___Common'              :                   [    '*'    ,    '<Esc><LeftMouse>viwy'   ],
\ '<C-B>___o___Common'                      :                   [    '*'    ,    '<Esc>z='   ],
\ '<C-V>___!___Common'                      :                   [    '*'    ,    '<C-R>+'   ],
\ '<Up>___ ___Common'                       :                   [    '*'    ,    'k'   ],
\ '<Up>___n___Common'                       :                   [    '*'    ,    'k'   ],
\ '<Up>___v___Common'                       :                   [    '*'    ,    'k'   ],
\ '<Esc>___v___Common'                      :                   [    '*'    ,    '<Esc><Cmd>call Set_NormMode_ColorStyle()<CR>'   ],
\ 'v___v___Common'                          :                   [    '*'    ,    '<Esc><Cmd>call Set_NormMode_ColorStyle()<CR>'   ],
\ '<CR>___v___Common'                       :                   [    '*'    ,    '<Esc><Cmd>call Set_NormMode_ColorStyle()<CR>'   ],
\ 'F___ ___Common'                          :                   [    '*'    ,    'E'   ],
\ '<M-c>___i___Common'                      :                   [    ' '    ,    '<Cmd>Calendar<CR>'   ],
\ '<Right>___v___Common'                    :                   [    '*'    ,    'l'   ],
\ '<Right>___ ___Common'                    :                   [    '*'    ,    'l'   ],
\ '<Right>___n___Common'                    :                   [    '*'    ,    'l'   ],
\ '<C-P>___!___Common'                      :                   [    '*'    ,    '<C-R>'   ],
\ 'Q___ ___Common'                          :                   [    '*'    ,    '<Nop>'   ],
\ '.___ ___Common'                          :                   [    '*'    ,    '<Tab>'   ],
\ '<4-LeftMouse>___ ___Common'              :                   [    '*'    ,    '<4-LeftMouse> y'   ],
\ '<M-b>___t___Common'                      :                   [    ' '    ,    '<C-\><C-N><Cmd>call OpenBrowser()<CR>'   ],
\ '<LeftMouse>___c___Common'                :                   [    '*'    ,    '<Esc>'   ],
\ '<F3>___ ___Common'                       :                   [    '*'    ,    'n'   ],
\ '<F18>___n___Common'                      :                   [    '*'    ,    '<Cmd>call Cscopefind()<CR>'   ],
\ 'r___no___Common'                         :                   [    '*'    ,    '.'   ],
\ '<C-U>___n___Common'                      :                   [    '*'    ,    '<C-R>'   ],
\ '<Left>___no___Common'                    :                   [    '*'    ,    'h'   ],
\ '<C-Up>___no___Common'                    :                   [    '*'    ,    '<Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<Left>___v___Common'                     :                   [    '*'    ,    'h'   ],
\ '<Left>___ ___Common'                     :                   [    '*'    ,    'h'   ],
\ '<Left>___n___Common'                     :                   [    '*'    ,    'h'   ],
\ ',___ ___Common'                          :                   [    '*'    ,    '<C-O>'   ],
\ '<C-T>___!___Common'                      :                   [    '*'    ,    '<Cmd>call Create_Terminal_buffer()<CR>'   ],
\ '<C-C>___n___Common'                      :                   [    '*'    ,    'i<C-V>uf42e<Esc>'   ],
\ 'O___n___Common'                          :                   [    '*'    ,    'O<Esc>'   ],
\ '<C-Up>___t___Common'                     :                   [    '*'    ,    '<C-\><C-N><Cmd>call EventWinLeave()<CR><Cmd>call GoUp()<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<F1>___!___Common'                       :                   [    ' '    ,    '<Nop>'   ],
\ '<C-q>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>q<CR><Cmd>call EventWinEnter()<CR>'                                                       ],
\ '<C-q>___!___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>q<CR><Cmd>call EventWinEnter()<CR>'                                                       ],
\ '<C-q>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call EventWinLeave()<CR><Cmd>q<CR><Cmd>call EventWinEnter()<CR>'                                                       ],
\ '<F22>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinHeightUp()<CR>'                                      ],
\ '<F15>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinHeightDown()<CR>'                                    ],
\ '<F14>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinWidthL()<CR>'                                        ],
\ '<F16>___ ___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinWidthR()<CR>'                                        ],
\ '<F22>___!___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinHeightUp()<CR>a'                                     ],
\ '<F15>___!___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinHeightDown()<CR>a'                                   ],
\ '<F16>___!___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinWidthR()<CR>a'                                       ],
\ '<F14>___!___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinWidthL()<CR>a'                                       ],
\ '<F22>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinHeightUp()<CR>a'                                     ],
\ '<F15>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinHeightDown()<CR>a'                                   ],
\ '<F16>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinWidthR()<CR>a'                                       ],
\ '<F14>___t___DefaultMode'                 :                   [ '*'     ,      '<Cmd>call WinWidthL()<CR>a'                                       ],
\}
call extend( g:keybinds, additonal_keybinds )

"  terminal
let additonal_keybinds = {
\ '<Esc>___t___Common'                      :                   [ '*'     ,      '<C-\><C-N><Cmd>call EventTermEscape()<CR>'   ],
\ '<CR>___n___TermMode'                     :                   [ '*@'    ,      '<Cmd>call TerminalSpecialMovementToggle()<CR>'   ],
\ 'a___n___TermMode'                        :                   [ '*@'    ,      'a<Cmd>call Tmux_exit_copy_mode()<CR><Cmd>call EventTermEnter()<CR>'    ],
\ 'p___n___TermMode'                        :                   [ '*@'    ,      'p'                                                                ],
\ 'p___n___TermSpecialMovement'             :                   [ '*@'    ,      'p'                                                                ],
\ '<PageUp>___n___TermMode'                 :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_PageUp()<CR>'                             ],
\ '<PageUp>___n___TermSpecialMovement'      :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_PageUp()<CR>'                             ],
\ '<PageDown>___n___TermMode'               :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_PageDown()<CR>'                           ],
\ '<PageDown>___n___TermSpecialMovement'    :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_PageDown()<CR>'   ],
\ '<Space>___n___TermMode'                  :                   [ '*@'    ,      '<Cmd>call Tmux_enter_copy_mode()<CR>a<Cmd>call EventTermEnter() <CR>' ],
\ '<Space>___n___TermSpecialMovement'       :                   [ '*@'    ,      '<Cmd>call Tmux_enter_copy_mode()<CR>a<Cmd>call EventTermEnter()<CR>'   ],
\ 's___n___TermMode'                        :                   [ '*@'    ,      'a<Cmd>call Tmux_copymode_3s()<CR>'   ],
\ 's___n___TermSpecialMovement'             :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_s()<CR>a<C-\><C-n>'   ],
\ 'f___n___TermMode'                        :                   [ '*@'    ,      'a<Cmd>call Tmux_copymode_3f()<CR>'   ],
\ 'f___n___TermSpecialMovement'             :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_f()<CR>a<C-\><C-n>'   ],
\ 'e___n___TermMode'                        :                   [ '*@'    ,      'a<Cmd>call Tmux_copymode_3e()<CR>'   ],
\ 'e___n___TermSpecialMovement'             :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_e()<CR>a<C-\><C-n>'   ],
\ 'd___n___TermMode'                        :                   [ '*@'    ,      'a<Cmd>call Tmux_copymode_3d()<CR>'   ],
\ 'd___n___TermSpecialMovement'             :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_d()<CR>a<C-\><C-n>'   ],
\ '<Up>___n___TermSpecialMovement'          :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_Up()<CR>a<C-\><C-n>'   ],
\ '<Down>___n___TermSpecialMovement'        :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_Down()<CR>a<C-\><C-n>'   ],
\ '<Left>___n___TermSpecialMovement'        :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_Left()<CR>a<C-\><C-n>'   ],
\ '<Right>___n___TermSpecialMovement'       :                   [ '*@'    ,      '<Cmd>call Tmux_copymode_Right()<CR>a<C-\><C-n>'   ],
\ '<C-Q>___ ___TermMode'                    :                   [ '*@'    ,      '<Cmd>call EventWinLeave()<CR><Cmd>bunload!<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Q>___!___TermMode'                    :                   [ '*@'    ,      '<Cmd>call EventWinLeave()<CR><Cmd>bunload!<CR><Cmd>call EventWinEnter()<CR>'   ],
\ '<C-Q>___t___TermMode'                    :                   [ '*@'    ,      '<Cmd>call EventWinLeave()<CR><Cmd>bunload!<CR><Cmd>call EventWinEnter()<CR>'   ],
\}
call extend( g:keybinds, additonal_keybinds )

" need map function for each 'Super-Mode'. So no need unset-function.
"  modes are 'Super-Modes': 
"  Common:      Stuff that needs to set only during vim init.
"  DefaultMode: Not in one of the other Modes
"  TermMode:    In a terminal-window
"  ExMode:      In the ex-mode window


let additonal_keybinds = {
\ '<A-m>___ ___DefaultMode' :  [ ' '   ,     '<Cmd>call Mutt()<CR>'],
\ '<A-m>___!___DefaultMode' :  [ ' '   ,     '<Cmd>call Mutt()<CR>'],
\ '<A-m>___t___DefaultMode' :  [ ' '   ,     '<Cmd>call Mutt()<CR>'],
\ '<A-b>___ ___DefaultMode' :  [ ' '   ,     '<Cmd>call OpenBrowser()<CR>'],
\ '<A-b>___!___DefaultMode' :  [ ' '   ,     '<Cmd>call OpenBrowser()<CR>'],
\ '<A-b>___t___DefaultMode' :  [ ' '   ,     '<Cmd>call OpenBrowser()<CR>'],
\ '<A-c>___ ___DefaultMode' :  [ ' '   ,     '<Cmd>Calendar<CR>'],
\ '<A-c>___!___DefaultMode' :  [ ' '   ,     '<Cmd>Calendar<CR>'],
\ '<A-c>___t___DefaultMode' :  [ ' '   ,     '<Cmd><CR>'],
\ '-___ ___DefaultMode'     :    g:keybinds['-___nv___Common'],
\ '-___ ___ExMode'     :         g:keybinds['-___nv___Common'],
\ '<A-c>___n___ExMode'     : [ ' ' , '<Cmd>Calendar<CR> '],
\ '<A-c>___i___ExMode'     : [ ' ' , '<Cmd>Calendar<CR>'],
\ '<A-c>___c___ExMode'     : [ ' ' , '<Cmd>Calendar<CR>'],
\ '<A-b>___n___ExMode'     : [ ' ' , '<Cmd>call OpenBrowser()<CR>'],
\ '<A-b>___i___ExMode'     : [ ' ' , '<Cmd>call OpenBrowser()<CR>'],
\ '<A-b>___c___ExMode'     : [ ' ' , '<Cmd>call OpenBrowser()<CR>'],
\ '<A-m>___n___ExMode'     : [ ' ' , '<Cmd>call Mutt()<CR>'],
\ '<A-m>___i___ExMode'     : [ ' ' , '<Cmd>call Mutt()<CR>'],
\ '<A-m>___c___ExMode'     : [ ' ' , '<Cmd>call Mutt()<CR>'],
\}
call extend( g:keybinds, additonal_keybinds )
